A constant buffer view is created with a D3D12_CONSTANT_BUFFER_VIEW_DESC instance

// Constant data per-object
struct ObjectConstants {
	XMFLOAT4X4 WorldViewProj = MathHelp::Identity4x4();
};

std::unique_ptr<UploadBuffer<ObjectConstants>> mObjectCB = nullptr;

// avoid dealing with the object constant pointer directly 

// forwards the arguments to the UploadBuffer<ObjectConstants> constructor to create a unique pointer to the object
mObjectCB = std::make_unique<UploadBuffer<ObjectConstants>>(
	md3dDevice.Get(), n, true);

UINT objCBByteSize = d3dUtil::CalcConstantBufferByteSize(sizeof(ObjectConstants));

// address to start of the buffer
D3D12_GPU_VIRTUAL_ADDRESS cbAddress = mObjectCB->Resource()->GetGPUVirtualAddress();

// offset to the ith object constant buffer in the buffer
int boxCBufIndex = i;
cbAddress += boxCBufIndex*objCBByteSize;

D3D12_CONSTANT_BUFFER_VIEW_DESC cbvDesc;
cbvDesc.BufferLocation = cbAddress;
cbvDesc.SizeInBytes = d3dUtil::CalcConstantBufferByteSize(sizeof(ObjectConstants));

// bind it to the pipeline
md3dDevice->CreateConstantBufferView(
	&cbvDesc,
	mCbvHeap->GetCPUDescriptorHandleForHeapStart());